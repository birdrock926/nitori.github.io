diff --git a/node_modules/strapi-plugin-comments/dist/server/index.js b/node_modules/strapi-plugin-comments/dist/server/index.js
index a66244b..e440fa7 100644
--- a/node_modules/strapi-plugin-comments/dist/server/index.js
+++ b/node_modules/strapi-plugin-comments/dist/server/index.js
@@ -73,7 +73,7 @@ spurious results.`)}}return!1},g0=5;function m0(i,u){const[o,h]=u?[i,u]:[void 0,
 `)))!==null&&u!==void 0?u:!1}function bm(i,u){switch(i.kind){case Xt.NULL:return null;case Xt.INT:return parseInt(i.value,10);case Xt.FLOAT:return parseFloat(i.value);case Xt.STRING:case Xt.ENUM:case Xt.BOOLEAN:return i.value;case Xt.LIST:return i.values.map(o=>bm(o,u));case Xt.OBJECT:return Tm(i.fields,o=>o.name.value,o=>bm(o.value,u));case Xt.VARIABLE:return u?.[i.name.value]}}function cr(i){if(i!=null||He(!1,"Must provide name."),typeof i=="string"||He(!1,"Expected name to be a string."),i.length===0)throw new Bn("Expected name to be a non-empty string.");for(let u=1;u<i.length;++u)if(!u0(i.charCodeAt(u)))throw new Bn(`Names must only contain [_a-zA-Z0-9] but "${i}" does not.`);if(!o0(i.charCodeAt(0)))throw new Bn(`Names must start with [_a-zA-Z] but "${i}" does not.`);return i}function N0(i){if(i==="true"||i==="false"||i==="null")throw new Bn(`Enum values cannot be named: ${i}`);return cr(i)}function ll(i){return L0(i)||z0(i)||P0(i)||D0(i)||F0(i)||U0(i)||M0(i)||Cm(i)}function L0(i){return Ui(i,tv)}function z0(i){return Ui(i,j0)}function P0(i){return Ui(i,G0)}function D0(i){return Ui(i,q0)}function F0(i){return Ui(i,Y0)}function U0(i){return Ui(i,Q0)}function M0(i){return Ui(i,W0)}function Cm(i){return Ui(i,B0)}class W0{constructor(u){ll(u)||He(!1,`Expected ${$n(u)} to be a GraphQL type.`),this.ofType=u}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}class B0{constructor(u){$0(u)||He(!1,`Expected ${$n(u)} to be a GraphQL nullable type.`),this.ofType=u}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function $0(i){return ll(i)&&!Cm(i)}function Km(i){return typeof i=="function"?i():i}function ev(i){return typeof i=="function"?i():i}class tv{constructor(u){var o,h,m,A;const E=(o=u.parseValue)!==null&&o!==void 0?o:Fm;this.name=cr(u.name),this.description=u.description,this.specifiedByURL=u.specifiedByURL,this.serialize=(h=u.serialize)!==null&&h!==void 0?h:Fm,this.parseValue=E,this.parseLiteral=(m=u.parseLiteral)!==null&&m!==void 0?m:(C,x)=>E(bm(C,x)),this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(A=u.extensionASTNodes)!==null&&A!==void 0?A:[],u.specifiedByURL==null||typeof u.specifiedByURL=="string"||He(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${$n(u.specifiedByURL)}.`),u.serialize==null||typeof u.serialize=="function"||He(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),u.parseLiteral&&(typeof u.parseValue=="function"&&typeof u.parseLiteral=="function"||He(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class j0{constructor(u){var o;this.name=cr(u.name),this.description=u.description,this.isTypeOf=u.isTypeOf,this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(o=u.extensionASTNodes)!==null&&o!==void 0?o:[],this._fields=()=>rv(u),this._interfaces=()=>nv(u),u.isTypeOf==null||typeof u.isTypeOf=="function"||He(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${$n(u.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:iv(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function nv(i){var u;const o=Km((u=i.interfaces)!==null&&u!==void 0?u:[]);return Array.isArray(o)||He(!1,`${i.name} interfaces must be an Array or a function which returns an Array.`),o}function rv(i){const u=ev(i.fields);return aa(u)||He(!1,`${i.name} fields must be an object with field names as keys or a function which returns such an object.`),Df(u,(o,h)=>{var m;aa(o)||He(!1,`${i.name}.${h} field config must be an object.`),o.resolve==null||typeof o.resolve=="function"||He(!1,`${i.name}.${h} field resolver must be a function if provided, but got: ${$n(o.resolve)}.`);const A=(m=o.args)!==null&&m!==void 0?m:{};return aa(A)||He(!1,`${i.name}.${h} args must be an object with argument names as keys.`),{name:cr(h),description:o.description,type:o.type,args:k0(A),resolve:o.resolve,subscribe:o.subscribe,deprecationReason:o.deprecationReason,extensions:Rr(o.extensions),astNode:o.astNode}})}function k0(i){return Object.entries(i).map(([u,o])=>({name:cr(u),description:o.description,type:o.type,defaultValue:o.defaultValue,deprecationReason:o.deprecationReason,extensions:Rr(o.extensions),astNode:o.astNode}))}function aa(i){return Ym(i)&&!Array.isArray(i)}function iv(i){return Df(i,u=>({description:u.description,type:u.type,args:V0(u.args),resolve:u.resolve,subscribe:u.subscribe,deprecationReason:u.deprecationReason,extensions:u.extensions,astNode:u.astNode}))}function V0(i){return Tm(i,u=>u.name,u=>({description:u.description,type:u.type,defaultValue:u.defaultValue,deprecationReason:u.deprecationReason,extensions:u.extensions,astNode:u.astNode}))}class G0{constructor(u){var o;this.name=cr(u.name),this.description=u.description,this.resolveType=u.resolveType,this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(o=u.extensionASTNodes)!==null&&o!==void 0?o:[],this._fields=rv.bind(void 0,u),this._interfaces=nv.bind(void 0,u),u.resolveType==null||typeof u.resolveType=="function"||He(!1,`${this.name} must provide "resolveType" as a function, but got: ${$n(u.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:iv(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}class q0{constructor(u){var o;this.name=cr(u.name),this.description=u.description,this.resolveType=u.resolveType,this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(o=u.extensionASTNodes)!==null&&o!==void 0?o:[],this._types=H0.bind(void 0,u),u.resolveType==null||typeof u.resolveType=="function"||He(!1,`${this.name} must provide "resolveType" as a function, but got: ${$n(u.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return typeof this._types=="function"&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function H0(i){const u=Km(i.types);return Array.isArray(u)||He(!1,`Must provide Array of types or a function which returns such an array for Union ${i.name}.`),u}class Y0{constructor(u){var o;this.name=cr(u.name),this.description=u.description,this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(o=u.extensionASTNodes)!==null&&o!==void 0?o:[],this._values=typeof u.values=="function"?u.values:Bm(this.name,u.values),this._valueLookup=null,this._nameLookup=null}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return typeof this._values=="function"&&(this._values=Bm(this.name,this._values())),this._values}getValue(u){return this._nameLookup===null&&(this._nameLookup=v0(this.getValues(),o=>o.name)),this._nameLookup[u]}serialize(u){this._valueLookup===null&&(this._valueLookup=new Map(this.getValues().map(h=>[h.value,h])));const o=this._valueLookup.get(u);if(o===void 0)throw new Bn(`Enum "${this.name}" cannot represent value: ${$n(u)}`);return o.name}parseValue(u){if(typeof u!="string"){const h=$n(u);throw new Bn(`Enum "${this.name}" cannot represent non-string value: ${h}.`+Of(this,h))}const o=this.getValue(u);if(o==null)throw new Bn(`Value "${u}" does not exist in "${this.name}" enum.`+Of(this,u));return o.value}parseLiteral(u,o){if(u.kind!==Xt.ENUM){const m=Mm(u);throw new Bn(`Enum "${this.name}" cannot represent non-enum value: ${m}.`+Of(this,m),{nodes:u})}const h=this.getValue(u.value);if(h==null){const m=Mm(u);throw new Bn(`Value "${m}" does not exist in "${this.name}" enum.`+Of(this,m),{nodes:u})}return h.value}toConfig(){const u=Tm(this.getValues(),o=>o.name,o=>({description:o.description,value:o.value,deprecationReason:o.deprecationReason,extensions:o.extensions,astNode:o.astNode}));return{name:this.name,description:this.description,values:u,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function Of(i,u){const o=i.getValues().map(m=>m.name),h=b0(u,o);return m0("the enum value",h)}function Bm(i,u){return aa(u)||He(!1,`${i} values must be an object with value names as keys.`),Object.entries(u).map(([o,h])=>(aa(h)||He(!1,`${i}.${o} must refer to an object with a "value" key representing an internal value but got: ${$n(h)}.`),{name:N0(o),description:h.description,value:h.value!==void 0?h.value:o,deprecationReason:h.deprecationReason,extensions:Rr(h.extensions),astNode:h.astNode}))}class Q0{constructor(u){var o,h;this.name=cr(u.name),this.description=u.description,this.extensions=Rr(u.extensions),this.astNode=u.astNode,this.extensionASTNodes=(o=u.extensionASTNodes)!==null&&o!==void 0?o:[],this.isOneOf=(h=u.isOneOf)!==null&&h!==void 0?h:!1,this._fields=J0.bind(void 0,u)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}toConfig(){const u=Df(this.getFields(),o=>({description:o.description,type:o.type,defaultValue:o.defaultValue,deprecationReason:o.deprecationReason,extensions:o.extensions,astNode:o.astNode}));return{name:this.name,description:this.description,fields:u,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,isOneOf:this.isOneOf}}toString(){return this.name}toJSON(){return this.toString()}}function J0(i){const u=ev(i.fields);return aa(u)||He(!1,`${i.name} fields must be an object with field names as keys or a function which returns such an object.`),Df(u,(o,h)=>(!("resolve"in o)||He(!1,`${i.name}.${h} field has a resolve property, but Input Types cannot define resolvers.`),{name:cr(h),description:o.description,type:o.type,defaultValue:o.defaultValue,deprecationReason:o.deprecationReason,extensions:Rr(o.extensions),astNode:o.astNode}))}function Mi(i){const u=X0(i);if(u)throw u;return i}function X0(i){if(typeof i=="string"||He(!1,"Expected name to be a string."),i.startsWith("__"))return new Bn(`Name "${i}" must not begin with "__", which is reserved by GraphQL introspection.`);try{cr(i)}catch(u){return u}}const Z0=i=>i.scalarType({name:"ID",asNexusMethod:"id",description:"id as string or integer",serialize:u=>u,parseValue(u){const o=parseInt(u);return Le.isNumber(o)?o:u},parseLiteral(u){return u.kind===Xt.INT||u.kind===Xt.STRING?u.value:null}}),K0=i=>i.inputObjectType({name:"IdentifyCommentAuthor",definition(u){u.nonNull.id("id")}}),ey=i=>i.inputObjectType({name:"RemoveComment",definition(u){u.id("id"),u.nonNull.string("relation"),u.field("author",{type:"IdentifyCommentAuthor"})}}),ty=i=>i.objectType({name:"Report",definition(u){u.id("id"),u.nonNull.string("content"),u.field("reason",{type:"ReportReason"}),u.field("related",{type:"CommentSingle"}),u.string("createdAt"),u.string("updatedAt")}}),ny=(i,{reportReasons:u})=>i.enumType({name:"ReportReason",description:"Reason of abuse report",members:Object.values(u)}),ry=i=>i.objectType({name:"ResponseFindAll",definition(u){u.nonNull.list.field("data",{type:"CommentSingle"}),u.field("meta",{type:"ResponseMeta"})}}),iy=i=>i.objectType({name:"ResponseFindAllPerAuthor",definition(u){u.nonNull.list.field("data",{type:"CommentSingle"}),u.field("meta",{type:"ResponseMeta"})}}),oy=i=>i.objectType({name:"ResponseMeta",definition(u){u.field("pagination",{type:"ResponsePagination"})}}),uy=i=>i.objectType({name:"ResponsePagination",definition(u){u.int("page"),u.int("pageSize"),u.int("pageCount"),u.int("total"),u.int("start"),u.int("limit")}}),ay=i=>i.inputObjectType({name:"UpdateComment",definition(u){u.id("id"),u.nonNull.string("content"),u.nonNull.string("relation"),u.field("author",{type:"IdentifyCommentAuthor"})}}),sy=[qv,Hv,Yv,Qv,Jv,Xv,Zv,Z0,K0,ey,ny,ry,iy,oy,uy,ay,ty],ly=(i,u)=>sy.map(o=>o(u,i)),ov=i=>i.plugin("graphql").service("extension"),cy=i=>{const u=ov(i);u.shadowCRUD(lr(i,"comment")).disable(),u.shadowCRUD(lr(i,"comment")).disableQueries(),u.shadowCRUD(lr(i,"comment")).disableMutations(),u.shadowCRUD(lr(i,"comment-report")).disable(),u.shadowCRUD(lr(i,"comment-report")).disableQueries(),u.shadowCRUD(lr(i,"comment-report")).disableMutations()},fy=async({strapi:i})=>{i.plugin("graphql")&&(cy(i),(await ft(i,"common").getConfig(oa.ENABLED_COLLECTIONS,[])).length&&await hy(i))},hy=async i=>{const u=ov(i),o=await ft(i,"common").getConfig();u.use(({strapi:h,nexus:m})=>{const A=ly(o,m),E=Gv(h,m),C=Bv(h,m),x=Dv(o);return{types:[A,E,C],resolversConfig:x}})},ra={comments:{read:"comments-read",moderate:"comments-moderate"},reports:{read:"reports-read",review:"reports-review"},settings:{read:"settings-read",change:"settings-change"}},py=async({strapi:i})=>{if(i.plugin("graphql")&&await fy({strapi:i}),Object.keys(i.plugins).indexOf("users-permissions")===-1)throw new Error("In order to make the comments plugin work the users-permissions plugin is required");const u=[{section:"plugins",displayName:"Comments: Read",uid:ra.comments.read,pluginName:"comments"},{section:"plugins",displayName:"Comments: Moderate",uid:ra.comments.moderate,pluginName:"comments"},{section:"plugins",displayName:"Reports: Read",uid:ra.reports.read,pluginName:"comments"},{section:"plugins",displayName:"Reports: Moderate",uid:ra.reports.review,pluginName:"comments"},{section:"plugins",displayName:"Settings: Read",uid:ra.settings.read,pluginName:"comments"},{section:"plugins",displayName:"Settings: Change",uid:ra.settings.change,pluginName:"comments"}];await i.admin.services.permission.actionProvider.registerMany(u)},dy={isValidationEnabled:!0,enabledCollections:[],moderatorRoles:[],approvalFlow:[],entryLabel:{"*":["Title","title","Name","name","Subject","subject"]},reportReasons:{BAD_LANGUAGE:Zt.BAD_LANGUAGE,DISCRIMINATION:Zt.DISCRIMINATION,OTHER:Zt.OTHER},blockedAuthorProps:[]},gy=v.z.object({[Zt.BAD_LANGUAGE]:v.z.literal(Zt.BAD_LANGUAGE),[Zt.OTHER]:v.z.literal(Zt.OTHER),[Zt.DISCRIMINATION]:v.z.literal(Zt.DISCRIMINATION)}),wm=v.z.object({isValidationEnabled:v.z.boolean().optional(),reportReasons:gy.optional(),isGQLPluginEnabled:v.z.boolean().optional(),[Cr.ENABLED_COLLECTIONS]:v.z.array(v.z.string()),[Cr.MODERATOR_ROLES]:v.z.array(v.z.string()),[Cr.APPROVAL_FLOW]:v.z.array(v.z.string()),[Cr.ENTRY_LABEL]:v.z.record(v.z.array(v.z.string())),[Cr.BAD_WORDS]:v.z.boolean().optional(),[Cr.AUTHOR_BLOCKED_PROPS]:v.z.array(v.z.string()),gql:v.z.object({auth:v.z.boolean().optional()}).optional(),client:v.z.object({url:v.z.string().nullable(),contactEmail:v.z.string().nullable()}).default({url:null,contactEmail:null})}),my={default:wm.parse(dy),validate:i=>wm.safeParse(i)},Y=({left:i,right:u})=>{if(u!==void 0&&i!==void 0)throw new Error(`Received both left and right values at runtime when opening an Either
       Left: ${JSON.stringify(i)}
       Right: ${JSON.stringify(u)}`);if(i!==void 0)return i;if(u!==void 0)return u;throw new Error("Received no left or right values at runtime when opening Either")},vy=i=>i.left!==void 0,pe=i=>i.right!==void 0,uv=i=>({left:i}),ol=i=>({right:i});let An=class av extends Error{constructor(u,o,h=void 0){super(),this.name="Strapi:Plugin:Comments",this.status=u||500,this.message=o||"Internal error",this.payload=h,Object.setPrototypeOf(this,av.prototype)}toString(u=this){return`${u.name} - ${u.message}`}toJSON(){return this.payload?{...this.payload,name:this.name,message:this.message}:this}};const ce=(i,u)=>u instanceof An?i.throw(u.status,JSON.stringify(u)):u,yy=v.z.union([v.z.object({$eq:v.z.string().min(1)}),v.z.object({$eqi:v.z.string().min(1)})]),_y=v.z.union([v.z.object({$ne:v.z.string().min(1)}),v.z.object({$nei:v.z.string().min(1)})]),by=v.z.union([v.z.object({$gt:v.z.string().min(1)}),v.z.object({$gte:v.z.string().min(1)})]),wy=v.z.union([v.z.object({$lt:v.z.string().min(1)}),v.z.object({$lte:v.z.string().min(1)})]),Ay=v.z.union([v.z.object({$startsWith:v.z.string().min(1)}),v.z.object({$startsWithi:v.z.string().min(1)})]),Sy=v.z.union([v.z.object({$endsWith:v.z.string().min(1)}),v.z.object({$endsWithi:v.z.string().min(1)})]),Ey=v.z.union([v.z.object({$contains:v.z.string().min(1)}),v.z.object({$containsi:v.z.string().min(1)})]),Oy=v.z.union([v.z.object({$notContains:v.z.string().min(1)}),v.z.object({$notContainsi:v.z.string().min(1)})]),Xr=v.z.union([v.z.string(),v.z.number()]).transform(i=>Number(i)).pipe(v.z.number()),Ty=v.z.union([v.z.string(),v.z.boolean()]).transform(i=>typeof i=="string"?["t","true"].includes(i):i).pipe(v.z.boolean()),Cy=v.z.object({_q:v.z.string().optional()}),sv=v.z.string().regex(/^(content|createdAt|updatedAt|id):(desc|asc|ASC|DESC)$/,"Invalid orderBy options"),Iy=v.z.union([v.z.string(),v.z.number(),yy,_y,by,wy,Ay,Sy,Ey,Oy,v.z.object({$null:v.z.boolean()}),v.z.object({$notNull:v.z.boolean()})]),Am=i=>v.z.object(Object.keys(i).reduce((u,o)=>({...u,[o]:Iy.optional()}),{})),Zr={single:"single",array:"array"},sa=i=>{const u=Object.entries(i).reduce((o,[h,m])=>({...o,[h]:m===Zr.single?Xr:v.z.array(Xr)}),{});return v.z.object(u)},xy=v.z.object({pageSize:Xr.default(10),page:Xr.default(1)}).merge(Cy).merge(v.z.object({orderBy:sv.optional().nullable()})).merge(v.z.object({filters:Am({removed:!0,approvalStatus:!0}).merge(v.z.object({$or:v.z.array(Am({blocked:!0,blockedThread:!0})).optional()})).optional()})),Nt=i=>{if(!i.success){const u=i.error.issues.map(o=>`Path: ${o.path.join(".")} Code: ${o.code} Message: ${o.message}`).join(`
-`);return uv(new An(400,u))}return ol(i.data)},Ff=i=>v.z.string().regex(mm.relatedUid,{message:'Field "relation" got incorrect format, use format like "api::<collection name>.<content type name>:<document id>"'}).refine(u=>i.some(o=>u.startsWith(o)),"Invalid relation or not enabled collections"),Ry=v.z.object({id:v.z.union([v.z.number(),v.z.string()]),name:v.z.string().min(1).max(100).optional(),email:v.z.string().email(),avatar:v.z.string().url().optional()});v.z.union([v.z.string(),v.z.number(),v.z.boolean()]);const lv=xy.merge(v.z.object({_q:v.z.string().optional()})),Jr=i=>Nt(sa({id:Zr.single}).safeParse(i)),Ny=i=>Nt(lv.safeParse(i)),Ly=i=>Nt(lv.safeParse(i)),zy=(i,u)=>{const o=sa({id:Zr.single}).merge(v.z.object({removed:v.z.string().optional().transform(h=>h==="true")})).safeParse({...u,id:i});return Nt(o)},Py=i=>Nt(sa({id:Zr.single,reportId:Zr.single}).safeParse(i)),Dy=i=>{const u=sa({id:Zr.single,reportIds:Zr.array}).safeParse(i);return Nt(u)},Fy=i=>{const u=sa({reportIds:Zr.array}).safeParse(i);return Nt(u)},Uy=v.z.object({id:v.z.union([v.z.string(),v.z.number()]),email:v.z.string().email(),lastname:v.z.string().nullable().optional(),username:v.z.string().nullable().optional(),firstname:v.z.string().nullable().optional()}),cv=v.z.object({id:v.z.union([v.z.string(),v.z.number()]),content:v.z.string(),author:Uy}),My=i=>Nt(cv.safeParse(i)),Wy=i=>Nt(cv.pick({content:!0,id:!0}).safeParse(i)),By=i=>Nt(wm.safeParse(i)),fv=i=>v.z.object({relation:Ff(i),content:v.z.string().min(1),author:Ry.optional(),threadOf:v.z.union([v.z.string(),v.z.number()]).optional(),approvalStatus:v.z.nativeEnum(Fi).optional(),locale:v.z.string().optional()}),$y=(i,u,o)=>Nt(fv(i).safeParse({...o,relation:u})),jy=(i,u)=>Nt(fv(i).pick({content:!0,relation:!0,author:!0}).merge(sa({commentId:Zr.single})).safeParse(u)),ky=i=>v.z.object({relation:Ff(i)}),Vy=v.z.object({pagination:v.z.object({pageSize:Xr.default(10),page:Xr.default(1),withCount:Ty.optional().default(!1)}).optional()}),Gy=v.z.record(v.z.union([v.z.union([v.z.boolean(),v.z.literal("true").transform(()=>!0),v.z.literal("false").transform(()=>!1),v.z.literal("*")]),v.z.record(v.z.any())])).optional(),Im=i=>{const u=Am({id:!0,content:!0,authorId:!0,authorName:!0,authorEmail:!0,createdAt:!0,updatedAt:!0,removed:!0,blocked:!0,blockedThread:!0,approvalStatus:!0,isAdminComment:!0,threadOf:!0});return v.z.object({sort:sv.optional().nullable().default("createdAt:desc"),fields:v.z.string().array().optional(),omit:v.z.string().array().optional(),filters:u.merge(v.z.object({$and:u.array().min(1).optional(),$or:u.array().min(1).optional()})).optional(),isAdmin:v.z.boolean().optional().default(!1),populate:Gy,limit:Xr.optional(),skip:Xr.optional(),locale:v.z.string().optional()}).merge(ky(i)).merge(Vy)},qy=(i,u,o)=>Nt(Im(i).safeParse({...o,relation:u})),Hy=(i,u,o)=>{const h=Im(i).pick({sort:!0,fields:!0,omit:!0,filters:!0,isAdmin:!0,populate:!0,limit:!0,skip:!0,relation:!0,locale:!0,pagination:!0}).merge(v.z.object({startingFromId:v.z.number().optional(),dropBlockedThreads:v.z.boolean().optional().default(!1)}));return Nt(h.safeParse({...o,relation:u}))},Yy=(i,u)=>{const o=Im([]).pick({sort:!0,fields:!0,omit:!0,isAdmin:!0,populate:!0,limit:!0,skip:!0,pagination:!0,filters:!0,locale:!0}).merge(v.z.object({type:v.z.union([v.z.literal(ul.GENERIC),v.z.literal("generic")]).optional(),authorId:v.z.union([v.z.string(),v.z.number()])}));return Nt(o.safeParse({...u,...i}))},Qy=i=>v.z.object({relation:Ff(i[Cr.ENABLED_COLLECTIONS]),commentId:Xr,content:v.z.string().min(1),reason:v.z.nativeEnum(i.reportReasons)}),Jy=(i,u)=>Nt(Qy(i).safeParse(u)),Xy=i=>v.z.object({relation:Ff(i),commentId:v.z.union([v.z.string(),v.z.number()]),authorId:v.z.union([v.z.string(),v.z.number()])}),Zy=(i,u)=>Nt(Xy(i).safeParse(u)),Ky=({strapi:i})=>({getService(u){return ft(i,u)},async findAll(u){const o=Ny(u.query);if(pe(o))return this.getService("admin").findAll(Y(o));throw ce(u,Y(o))},async findReports(u){const o=Ly(u.query);if(pe(o))return this.getService("admin").findReports(Y(o));throw ce(u,Y(o))},async findOne(u){const o=zy(u.params.id,u.query);if(pe(o))return this.getService("admin").findOneAndThread(Y(o));throw ce(u,Y(o))},async blockComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").changeBlockedComment(Y(o).id,!0);throw ce(u,Y(o))},async unblockComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").changeBlockedComment(Y(o).id,!1);throw ce(u,Y(o))},async deleteComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").deleteComment(Y(o).id);throw ce(u,Y(o))},async blockCommentThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").blockCommentThread(Y(o).id,!0);throw ce(u,Y(o))},async unblockCommentThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").blockCommentThread(Y(o).id,!1);throw ce(u,Y(o))},async resolveAbuseReport(u){const o=Py(u.params);if(pe(o))return this.getService("admin").resolveAbuseReport(Y(o));throw ce(u,Y(o))},async resolveCommentMultipleAbuseReports(u){const o=Dy({...u.request.body,id:u.params.id});if(pe(o))return this.getService("admin").resolveCommentMultipleAbuseReports(Y(o));throw ce(u,Y(o))},async resolveAllAbuseReportsForComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").resolveAllAbuseReportsForComment(Y(o).id);throw ce(u,Y(o))},async resolveAllAbuseReportsForThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").resolveAllAbuseReportsForThread(Y(o).id);throw ce(u,Y(o))},async resolveMultipleAbuseReports(u){const o=Fy(u.request.body);if(pe(o))return this.getService("admin").resolveMultipleAbuseReports(Y(o));throw ce(u,Y(o))},async postComment(u){const o=My({id:u.params.id,content:u.request.body.content,author:u.request.body.author});if(pe(o))return this.getService("admin").postComment(Y(o));throw ce(u,Y(o))},async updateComment(u){const o=Wy({id:u.params.id,content:u.request.body.content});if(pe(o))return this.getService("admin").updateComment(Y(o));throw ce(u,Y(o))},async approveComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").approveComment(Y(o).id);throw ce(u,Y(o))},async rejectComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").rejectComment(Y(o).id);throw ce(u,Y(o))}}),Ir=async(i,u,o)=>Uf(i).getLocalConfig(u,o),nl=v.z.object({url:v.z.string(),name:v.z.string(),hash:v.z.string()}),e_=v.z.object({id:v.z.number(),...nl.shape,formats:v.z.object({thumbnail:nl.optional(),small:nl.optional(),medium:nl.optional(),large:nl.optional()}).optional()}).nullable().optional(),hv=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),blocked:v.z.boolean().nullable(),blockedThread:v.z.boolean().nullable(),blockReason:v.z.string().nullable(),isAdminComment:v.z.boolean().nullable(),removed:v.z.boolean().nullable(),approvalStatus:v.z.string().nullable(),related:v.z.string(),createdAt:v.z.string(),updatedAt:v.z.string().nullable(),publishedAt:v.z.string().nullable(),authorId:v.z.string().nullable(),authorName:v.z.string().nullable(),authorEmail:v.z.string().email().nullable(),authorAvatar:v.z.string().nullable(),authorUser:v.z.union([v.z.string(),v.z.object({id:v.z.number(),username:v.z.string(),email:v.z.string().email(),avatar:e_})]).optional().nullable(),locale:v.z.string().nullable()}),pv=v.z.object({page:v.z.number(),pageSize:v.z.number(),pageCount:v.z.number(),total:v.z.number()}),Di=(i,u)=>o=>i?u.parseAsync(o):Promise.resolve(o),dv=(i,u)=>o=>i?u.parseAsync(o):Promise.resolve(o),t_=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable()}),$m=hv.merge(v.z.object({gotThread:v.z.boolean().nullable().optional(),threadFirstItemId:v.z.number().nullable().optional(),reports:v.z.array(t_).default([]),author:v.z.any()})),al=$m.extend({threadOf:v.z.lazy(()=>v.z.union([v.z.number(),$m])).nullable().optional()}),n_=v.z.object({id:v.z.number(),uid:v.z.string(),documentId:v.z.string(),requireCommentsApproval:v.z.boolean().nullable().optional(),locale:v.z.string().nullable().optional()});al.omit({related:!0}).extend({related:n_.nullable().optional()});const r_=v.z.array(al),i_=v.z.object({pagination:pv,results:v.z.array(al)}),ia={findMany:r_,findWithCount:i_,findOne:al,create:al},o_=v.z.object({id:v.z.number(),documentId:v.z.string(),content:v.z.string(),blocked:v.z.boolean(),blockedThread:v.z.boolean(),blockReason:v.z.string().nullable(),authorId:v.z.string(),authorName:v.z.string(),authorEmail:v.z.string(),authorAvatar:v.z.string().nullable(),isAdminComment:v.z.boolean().nullable(),removed:v.z.boolean().nullable(),approvalStatus:v.z.string().nullable(),related:v.z.string(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string(),locale:v.z.string().nullable()}),gv=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable(),related:o_.nullable().optional()}),u_=v.z.object({results:v.z.array(gv),pagination:pv}),a_=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable()}),s_=v.z.array(v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable(),related:hv.nullable()})),Tf={findMany:s_,findPage:u_,update:a_,create:gv},l_=i=>{const u=lr(i,"comment-report"),o=i.query(u);return{async findPage(h){const m=await Ir(i,"isValidationEnabled",!1);return o.findPage(h).then(Di(m,Tf.findPage))},async findMany(h){const m=await Ir(i,"isValidationEnabled",!1);return o.findMany(h).then(dv(m,Tf.findMany))},async update(h){const m=await Ir(i,"isValidationEnabled",!1);return o.update(h).then(Di(m,Tf.update))},async updateMany(h){return o.updateMany(h)},async create(h){const m=await Ir(i,"isValidationEnabled",!1);return o.create(h).then(Di(m,Tf.create))}}},Pi=Le.once(l_),c_=i=>{const u=lr(i,"comment");return{async findMany(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findMany(o).then(dv(h,ia.findMany))},async findWithCount(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findPage(o).then(Di(h,ia.findWithCount))},async findOne(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findOne(o).then(m=>m?Di(h,ia.findOne)(m):null)},async update(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).update(o).then(Di(h,ia.findOne))},async delete(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).delete(o).then(m=>m?Di(h,ia.findOne)(m):null)},async deleteMany(o){return i.query(u).deleteMany(o)},updateMany(o){return i.query(u).updateMany(o)},async create(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).create(o).then(Di(h,ia.create))}}},it=Le.once(c_),f_=i=>({getLocalConfig(u,o){return i.config.get([Ov,u].filter(Boolean).join("."),o)},async getStore(){return await i.store({type:"plugin",name:"comments"})},async getConfig(){return await(await this.getStore()).get({key:"config"})},async get(u){const o=await this.getConfig(),h={regex:Object.keys(mm).reduce((T,F)=>({...T,[F]:mm[F].toString()}),{})},m=!!i.plugin("graphql"),A=this.getLocalConfig("reportReasons");if(o)return ol({...o,...h,reportReasons:A,isGQLPluginEnabled:u?m:void 0});const E=this.getLocalConfig("entryLabel"),C=this.getLocalConfig("approvalFlow"),x=this.getLocalConfig("blockedAuthorProps"),N={entryLabel:E,approvalFlow:C,blockedAuthorProps:x,reportReasons:A,...h};if(u){const T=this.getLocalConfig("enabledCollections"),F=this.getLocalConfig("moderatorRoles");return ol({...N,enabledCollections:T,moderatorRoles:F,isGQLPluginEnabled:m})}return ol(N)},async update(u){return await(await this.getStore()).set({key:"config",value:{...u,reportReasons:{BAD_LANGUAGE:Zt.BAD_LANGUAGE,DISCRIMINATION:Zt.DISCRIMINATION,OTHER:Zt.OTHER}}}),this.get()},async restore(){return await(await this.getStore()).delete({key:"config"}),this.get()}}),Uf=Le.once(f_),h_=({strapi:i})=>({getService(u){return ft(i,u)},getStoreRepository(){return Uf(i)},async post(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=$y(h.enabledCollections,u.params.relation,u.request.body);if(pe(m))return this.getService("client").create(m.right,u.state.user);throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllFlat(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=qy(h.enabledCollections,u.params.relation,u.query);if(pe(m))return this.getService("common").findAllFlat(ua(m.right));throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllInHierarchy(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=Hy(h.enabledCollections,u.params.relation,u.query);if(pe(m))return this.getService("common").findAllInHierarchy(ua(m.right));throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllPerAuthor(u){const o=Yy(u.params,u.query);if(pe(o))return this.getService("common").findAllPerAuthor(ua(o.right),u.params.type?![ul.GENERIC.toLowerCase(),ul.GENERIC].includes(u.params.type):!1);throw ce(u,Y(o))},async put(u){const{user:o}=u.state,h=await this.getStoreRepository().get(!0);if(pe(h)){const m=Y(h),A=jy(m.enabledCollections,{...u.params,content:u.request.body.content,author:u.request.body.author});if(pe(A))return await this.getService("client").update(A.right,o);throw ce(u,Y(A))}throw ce(u,Y(h))},async reportAbuse(u){const{state:o}=u,{user:h}=o,m=await this.getStoreRepository().get(!0);if(pe(m)){const A=Y(m),E=Jy(A,{...u.request.body,...u.params});if(pe(E))return await this.getService("client").reportAbuse(E.right,h);throw ce(u,Y(E))}throw ce(u,Y(m))},async removeComment(u){const{state:o}=u,{user:h}=o,m=await this.getStoreRepository().get(!0);if(pe(m)){const A=Y(m),E=Zy(A.enabledCollections,{...u.query,...u.params});if(pe(E))return await this.getService("client").markAsRemoved(E.right,h);throw ce(u,Y(E))}throw ce(u,Y(m))}}),p_=({strapi:i})=>{const u=ft(i,"settings");return{async get(o){try{return await u.getConfig()}catch(h){throw ce(o,h)}},async getForSettingsPage(o){try{return await u.getConfig(!0)}catch(h){throw ce(o,h)}},async update(o){const h=By(o.request.body);if(pe(h))return await u.update(Y(h));throw ce(o,Y(h))},async restore(o){try{return await u.restore()}catch(h){throw ce(o,h)}},async restart(o){try{return u.restart(),o.send({message:"Restarted",status:200})}catch(h){throw ce(o,h)}}}},d_={admin:Ky,client:h_,settings:p_},g_=[{method:"GET",path:"/moderate/all",handler:"admin.findAll",config:{policies:[]}},{method:"GET",path:"/moderate/reports",handler:"admin.findReports",config:{policies:[]}},{method:"GET",path:"/moderate/single/:id",handler:"admin.findOne",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/approve",handler:"admin.approveComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/reject",handler:"admin.rejectComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/block",handler:"admin.blockComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/unblock",handler:"admin.unblockComment",config:{policies:[]}},{method:"DELETE",path:"/moderate/single/:id/delete",handler:"admin.deleteComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/report/:reportId/resolve",handler:"admin.resolveAbuseReport",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/report/resolve",handler:"admin.resolveCommentMultipleAbuseReports",config:{policies:[]}},{method:"PUT",path:"/moderate/all/:id/report/resolve",handler:"admin.resolveAllAbuseReportsForComment",config:{policies:[]}},{method:"PUT",path:"/moderate/all/:id/report/resolve-thread",handler:"admin.resolveAllAbuseReportsForThread",config:{policies:[]}},{method:"PUT",path:"/moderate/multiple/report/resolve",handler:"admin.resolveMultipleAbuseReports",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/update",handler:"admin.updateComment",config:{policies:[]}},{method:"PUT",path:"/moderate/thread/:id/block",handler:"admin.blockCommentThread",config:{policies:[]}},{method:"PUT",path:"/moderate/thread/:id/unblock",handler:"admin.unblockCommentThread",config:{policies:[]}},{method:"POST",path:"/moderate/thread/:id/postComment",handler:"admin.postComment",config:{policies:[]}}],m_=[{method:"PUT",path:"/settings/config",handler:"settings.update",config:{policies:[]}},{method:"DELETE",path:"/settings/config",handler:"settings.restore",config:{policies:[]}},{method:"POST",path:"/settings/restart",handler:"settings.restart",config:{policies:[]}},{method:"GET",path:"/settings/config",handler:"settings.getForSettingsPage",config:{policies:[]}},{method:"GET",path:"/moderate/config",handler:"settings.get",config:{policies:[]}}],v_=[...g_,...m_],y_=[{method:"GET",path:"/:relation",handler:"client.findAllInHierarchy",config:{policies:[],description:"Find all comments related to configured Collection / Single Type and return them in a nested structure",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"POST",path:"/:relation",handler:"client.post",config:{policies:[],description:"Post a comment against configured Collection / Single Type",tag:{plugin:"comments",name:"Comments",actionType:"create"}}},{method:"GET",path:"/:relation/flat",handler:"client.findAllFlat",config:{policies:[],description:"Find all comments related to configured Collection / Single Type and return them in a flat structure for further processing",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"PUT",path:"/:relation/comment/:commentId",handler:"client.put",config:{policies:[],description:"Update comment related to configured Collection / Single Type if user is the author",tag:{plugin:"comments",name:"Comments",actionType:"update"}}},{method:"POST",path:"/:relation/comment/:commentId/report-abuse",handler:"client.reportAbuse",config:{policies:[],description:"Report an abuse against comment for configured Collection / Single Type",tag:{plugin:"comments",name:"Comments",actionType:"create"}}},{method:"DELETE",path:"/:relation/comment/:commentId",handler:"client.removeComment",config:{policies:[],description:"Remove comment related to configured Collection / Single Type if user is the author",tag:{plugin:"comments",name:"Comments",actionType:"delete"}}},{method:"GET",path:"/author/:authorId",handler:"client.findAllPerAuthor",config:{policies:[],description:"Find all comments created by Strapi user",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"GET",path:"/author/:authorId/:type",handler:"client.findAllPerAuthor",config:{policies:[],description:"Find all comments created by specified type of user",tag:{plugin:"comments",name:"Comments",actionType:"find"}}}],__={"content-api":{type:"content-api",routes:y_},admin:{type:"admin",routes:v_}};class fn extends Error{constructor(u,o,h=void 0){super(),this.name="Strapi:Plugin:Comments",this.status=u||500,this.message=o||"Internal error",this.payload=h,Object.setPrototypeOf(this,fn.prototype)}toString(u=this){return`${u.name} - ${u.message}`}toJSON(){return this.payload?{...this.payload,name:this.name,message:this.message}:this}}const jm=i=>i.split(kv.relatedUid).filter(u=>u&&u.length>0),mv=i=>i&&{...i,reports:(i.reports||[]).filter(u=>!u.resolved)},km=(i,u,o=[])=>{const{authorUser:h,authorId:m,authorName:A,authorEmail:E,authorAvatar:C,...x}=i;let N={};if(h&&typeof h!="string"){const T=h;N=o.reduce((F,U)=>({...F,[U]:T[U]}),{id:T.id,name:T.username,email:T.email,avatar:T.avatar?.formats?.thumbnail.url||T.avatar?.url})}else m&&(N={id:m,name:A,email:E,avatar:C});return N=Le.isEmpty(N)?N:Object.fromEntries(Object.entries(N).filter(([T])=>!u.includes(T))),{...x,author:Le.isEmpty(N)?i.author||{}:N}},Cf=i=>{throw i?new fn(401,"Not authenticated"):new fn(403,"Not authorized")},b_=i=>{const{lastname:u,username:o,firstname:h}=i;return u&&h?`${h} ${u}`:o||h||""},w_=Le.once(i=>({findAll:{createParams(u,o,h,m,A){const[E,C]=vm(u),x={orderBy:u?{[E]:C}:void 0,where:A,page:o,pageSize:h};return m&&Le.set(x,"where.content.$contains",m),x},getPopulate(){return{authorUser:il(i),threadOf:{populate:{authorUser:il(i)}},reports:{where:{resolved:!1}}}}},findReports:{getDefaultWhere(){return{resolved:{$notNull:!0}}},createParams(u,o,h,m){const[A,E]=vm(u),C={orderBy:u?{[A]:E}:void 0,where:this.getDefaultWhere(),page:o,pageSize:h};return m&&Le.set(C,"where.content.$contains",m),C}},findOneAndThread:{getDefaultWhere(u){return u?{$or:[{removed:!1},{removed:{$notNull:!1}}]}:{}},getPopulate(){const u=il(i),o={reports:{where:{resolved:!1}}},h={populate:{threadOf:{populate:{...o}},...o}};return{populate:{...h.populate,authorUser:u,threadOf:{populate:{...h.populate.threadOf.populate,authorUser:u}}}}}}})),A_=({strapi:i})=>{const u=w_(i);return{getCommonService(){return ft(i,"common")},async findAll({_q:o,orderBy:h,page:m,pageSize:A,filters:E}){const C=u.findAll.createParams(h,m,A,o,E),x=u.findAll.getPopulate(),N=it(i),{pagination:T,results:F}=await N.findWithCount({...C,count:!0,populate:x}),U=await this.getCommonService().findRelatedEntitiesFor(F);return{pagination:T,result:F.map(Q=>this.getCommonService().sanitizeCommentEntity(Q,[],[])).map(Q=>this.getCommonService().mergeRelatedEntityTo(Q,U))}},async findReports({_q:o,orderBy:h,page:m,pageSize:A}){const E=u.findReports.createParams(h,m,A,o),{pagination:C,results:x}=await Pi(i).findPage({...E,populate:["related"]}),N=x.map($=>typeof $.related=="object"?$.related.id:null).filter(Boolean),T=il(i),F=await it(i).findMany({where:{threadOf:N},populate:["threadOf"],limit:Number.MAX_SAFE_INTEGER}),U=Array.from(new Set(F.map(({threadOf:$})=>typeof $=="object"?$.id:null).filter(Boolean)));return{result:x.map($=>{const J=U.includes($.related.id),te=this.getCommonService(),X={...$,related:te.sanitizeCommentEntity({...$.related,gotThread:J},[])},me=typeof T!="boolean"?T?.populate:{};return mv(te.sanitizeCommentEntity(X,[],[],me))}),pagination:C}},async findOneAndThread({id:o,removed:h,...m}){const A=il(i),E=u.findOneAndThread.getDefaultWhere(h),C=u.findOneAndThread.getPopulate(),x=await it(i).findOne({...C,where:{id:o}});if(!x)throw new An(404,"Not found");const{relatedId:N,uid:T}=this.getCommonService().parseRelationString(x.related),F=await i.documents(T).findOne({documentId:N}).then(te=>{if(!te)throw new An(404,"Relation not found");return{...te,uid:T}}),U=x.threadOf&&typeof x.threadOf=="object"?x.threadOf.id:null,Q=await this.getCommonService().findAllInHierarchy({filters:{...E,...m,threadOf:U,related:x.related},...C,startingFromId:U,isAdmin:!0,limit:Number.MAX_SAFE_INTEGER},!1),$=typeof A!="boolean"?A?.populate:{},J=this.getCommonService().sanitizeCommentEntity({...x,threadOf:x.threadOf||null},[],[],$);return{entity:F,selected:J,level:Q}},async changeBlockedComment(o,h){const m=await this.getCommonService().findOne({id:o});return this.getCommonService().updateComment({id:o},{blocked:Le.isNil(h)?!m.blocked:h})},async deleteComment(o){return it(i).update({where:{id:o},data:{removed:!0}})},async blockCommentThread(o,h){const m=await this.getCommonService().findOne({id:o}),A=h||!m.blocked,E=await this.getCommonService().updateComment({id:o},{blocked:A,blockedThread:A});return await this.blockNestedThreads(o,A),this.getCommonService().sanitizeCommentEntity(E,[])},async approveComment(o){const h=await it(i).update({where:{id:o},data:{approvalStatus:Fi.APPROVED}});if(!h)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(h,[])},async rejectComment(o){const h=await it(i).update({where:{id:o},data:{approvalStatus:Fi.REJECTED}});if(!h)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(h,[])},async blockNestedThreads(o,h){return this.getCommonService().modifiedNestedNestedComments(o,"blockedThread",h)},async resolveAbuseReport({id:o,reportId:h}){return Pi(i).update({where:{id:h,related:o},data:{resolved:!0}})},async resolveCommentMultipleAbuseReports({id:o,reportIds:h}){if((await Pi(i).findMany({where:{id:h,related:o},populate:["related"]})).length===h.length)return Pi(i).updateMany({where:{id:h},data:{resolved:!0}});throw new An(400,"At least one of selected reports got invalid comment entity relation. Try again.")},async resolveAllAbuseReportsForComment(o){if(!o)throw new An(400,"There is something wrong with comment Id. Try again.");return Pi(i).updateMany({where:{related:o,resolved:!1},data:{resolved:!0}})},async resolveAllAbuseReportsForThread(o){if(!o)throw new An(400,"There is something wrong with comment Id. Try again.");const h=await it(i).findMany({where:{threadOf:o},select:["id"]});return Pi(i).updateMany({where:{related:h.map(({id:m})=>m).concat([o]),resolved:!1},data:{resolved:!0}})},async resolveMultipleAbuseReports({reportIds:o}){return Pi(i).updateMany({where:{id:{$in:o}},data:{resolved:!0}})},async postComment({id:o,author:h,content:m}){const A=await it(i).findOne({where:{id:o}});if(!A)throw new An(404,"Not found");return it(i).create({data:{content:m,threadOf:o,authorId:h.id,authorName:b_(h),authorEmail:h.email,related:A.related,isAdminComment:!0}})},async updateComment({id:o,content:h}){const m=await it(i).update({where:{id:o},data:{content:h}});if(!m)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(m,[])}}},S_=async(i,u)=>{try{return ol(await i())}catch{return uv(u)}},E_=({strapi:i})=>{const u=async(o,h)=>{if(h)return{authorUser:h.id};if(o)return{authorId:o.id,authorName:o.name,authorEmail:o.email,authorAvatar:o.avatar}};return{getCommonService(){return ft(i,"common")},async create({relation:o,content:h,threadOf:m,author:A,approvalStatus:E,locale:C},x){const{uid:N,relatedId:T}=this.getCommonService().parseRelationString(o),F=await i.documents(N).findOne({documentId:T,locale:C});if(!F)throw new fn(400,'Relation for field "related" does not exist. Check your payload please.');const Q=(await this.getCommonService().getConfig(oa.APPROVAL_FLOW,[])).includes(N)||F.requireCommentsApproval,$=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]),J=await S_(async()=>m?await this.getCommonService().findOne({id:m,related:o,locale:C||null}):null,new fn(400,"Thread does not exist"));if(vy(J))throw Y(J);const te=Y(J);if(!A&&!this.getCommonService().isValidUserContext(x))throw Cf(x);const[X,me]=await Promise.all([this.getCommonService().checkBadWords(h),u(A,x)]),ve=!Le.isEmpty(me)&&!(me.authorId||me.authorUser);if(Le.isEmpty(me)||ve)throw new fn(400,`Not able to recognise author of a comment. Make sure you've provided "author" property in a payload or authenticated your request properly.`);if(Q&&E&&E!==Fi.PENDING)throw new fn(400,"Invalid approval status");const Ve={...await it(i).create({data:{...me,threadOf:m,locale:C,content:X,related:o,approvalStatus:Q?Fi.PENDING:Fi.APPROVED},populate:{authorUser:{populate:["avatar"]}}}),threadOf:te},Ye=this.getCommonService().sanitizeCommentEntity(Ve,$);try{await this.sendResponseNotification(Ye)}catch(Me){console.error(Me)}return Ye},async update({commentId:o,content:h,author:m,relation:A},E){if(!m&&!this.getCommonService().isValidUserContext(E))throw Cf(E);const C=E?.id||m?.id;if(await this.getCommonService().checkBadWords(h)){const x=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]),N=await this.getCommonService().findOne({id:o,related:A});if(N&&N.author?.id?.toString()===C?.toString()){const T=await it(i).update({where:{id:o},data:{content:h},populate:{threadOf:!0,authorUser:{populate:["avatar"]}}});return this.getCommonService().sanitizeCommentEntity(T,x)}}},async reportAbuse({commentId:o,relation:h,...m},A){if(!this.getCommonService().isValidUserContext(A))throw Cf(A);try{const E=await this.getCommonService().findOne({id:o,related:h});if(E.isAdminComment)throw new fn(403,"You're not allowed to take an action on that entity. This in a admin comment.");if(E){const C=await Pi(i).create({data:{...m,resolved:!1,related:o}});if(C){const x={...C,related:E};try{return await this.sendAbuseReportEmail(C.reason,C.content),x}catch{return x}}else throw new fn(500,"Report cannot be created")}throw new fn(403,"You're not allowed to take an action on that entity. Make sure that comment exist or you've authenticated your request properly.")}catch(E){throw E}},async markAsRemoved({commentId:o,relation:h,authorId:m},A){if(!m&&!this.getCommonService().isValidUserContext(A))throw Cf(A);const E=A?.id||m;if(!E)throw new fn(403,`You're not allowed to take an action on that entity. Make sure that you've provided proper "authorId" or authenticated your request properly.`);try{const C=A?.id?{authorUser:E}:{authorId:E};if(await this.getCommonService().findOne({id:o,related:h,...C})){const N=await it(i).update({where:{id:o,related:h},data:{removed:!0},populate:{threadOf:!0,authorUser:{populate:["avatar"]}}});await this.markAsRemovedNested(o,!0);const T=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]);return this.getCommonService().sanitizeCommentEntity(N,T)}else throw new fn(404,"Entity does not exist or you're not allowed to take an action on it")}catch{throw new fn(404,"Entity does not exist or you're not allowed to take an action on it")}},async sendAbuseReportEmail(o,h){const m="strapi-super-admin",A=await this.getCommonService().getConfig(oa.MODERATOR_ROLES,[m]);if(A.length>0){const E=await i.query("admin::user").findMany({where:{roles:{code:A}}}).then(C=>C.map(x=>x.email));if(E.length>0){const C=await i.query("admin::user").findOne({where:{roles:{code:m}}});i.plugin("email")&&await i.plugin("email").service("email").send({to:E,from:C.email,subject:"New abuse report on comment",text:`
+`);return uv(new An(400,u))}return ol(i.data)},Ff=i=>v.z.string().regex(mm.relatedUid,{message:'Field "relation" got incorrect format, use format like "api::<collection name>.<content type name>:<document id>"'}).refine(u=>i.some(o=>u.startsWith(o)),"Invalid relation or not enabled collections"),Ry=v.z.object({id:v.z.union([v.z.number(),v.z.string()]),name:v.z.string().min(1).max(100).optional(),email:v.z.string().email().optional().nullable(),avatar:v.z.string().url().optional()});v.z.union([v.z.string(),v.z.number(),v.z.boolean()]);const lv=xy.merge(v.z.object({_q:v.z.string().optional()})),Jr=i=>Nt(sa({id:Zr.single}).safeParse(i)),Ny=i=>Nt(lv.safeParse(i)),Ly=i=>Nt(lv.safeParse(i)),zy=(i,u)=>{const o=sa({id:Zr.single}).merge(v.z.object({removed:v.z.string().optional().transform(h=>h==="true")})).safeParse({...u,id:i});return Nt(o)},Py=i=>Nt(sa({id:Zr.single,reportId:Zr.single}).safeParse(i)),Dy=i=>{const u=sa({id:Zr.single,reportIds:Zr.array}).safeParse(i);return Nt(u)},Fy=i=>{const u=sa({reportIds:Zr.array}).safeParse(i);return Nt(u)},Uy=v.z.object({id:v.z.union([v.z.string(),v.z.number()]),email:v.z.string().email().optional().nullable(),lastname:v.z.string().nullable().optional(),username:v.z.string().nullable().optional(),firstname:v.z.string().nullable().optional()}),cv=v.z.object({id:v.z.union([v.z.string(),v.z.number()]),content:v.z.string(),author:Uy}),My=i=>Nt(cv.safeParse(i)),Wy=i=>Nt(cv.pick({content:!0,id:!0}).safeParse(i)),By=i=>Nt(wm.safeParse(i)),fv=i=>v.z.object({relation:Ff(i),content:v.z.string().min(1),author:Ry.optional(),threadOf:v.z.union([v.z.string(),v.z.number()]).optional(),approvalStatus:v.z.nativeEnum(Fi).optional(),locale:v.z.string().optional()}),$y=(i,u,o)=>Nt(fv(i).safeParse({...o,relation:u})),jy=(i,u)=>Nt(fv(i).pick({content:!0,relation:!0,author:!0}).merge(sa({commentId:Zr.single})).safeParse(u)),ky=i=>v.z.object({relation:Ff(i)}),Vy=v.z.object({pagination:v.z.object({pageSize:Xr.default(10),page:Xr.default(1),withCount:Ty.optional().default(!1)}).optional()}),Gy=v.z.record(v.z.union([v.z.union([v.z.boolean(),v.z.literal("true").transform(()=>!0),v.z.literal("false").transform(()=>!1),v.z.literal("*")]),v.z.record(v.z.any())])).optional(),Im=i=>{const u=Am({id:!0,content:!0,authorId:!0,authorName:!0,authorEmail:!0,createdAt:!0,updatedAt:!0,removed:!0,blocked:!0,blockedThread:!0,approvalStatus:!0,isAdminComment:!0,threadOf:!0});return v.z.object({sort:sv.optional().nullable().default("createdAt:desc"),fields:v.z.string().array().optional(),omit:v.z.string().array().optional(),filters:u.merge(v.z.object({$and:u.array().min(1).optional(),$or:u.array().min(1).optional()})).optional(),isAdmin:v.z.boolean().optional().default(!1),populate:Gy,limit:Xr.optional(),skip:Xr.optional(),locale:v.z.string().optional()}).merge(ky(i)).merge(Vy)},qy=(i,u,o)=>Nt(Im(i).safeParse({...o,relation:u})),Hy=(i,u,o)=>{const h=Im(i).pick({sort:!0,fields:!0,omit:!0,filters:!0,isAdmin:!0,populate:!0,limit:!0,skip:!0,relation:!0,locale:!0,pagination:!0}).merge(v.z.object({startingFromId:v.z.number().optional(),dropBlockedThreads:v.z.boolean().optional().default(!1)}));return Nt(h.safeParse({...o,relation:u}))},Yy=(i,u)=>{const o=Im([]).pick({sort:!0,fields:!0,omit:!0,isAdmin:!0,populate:!0,limit:!0,skip:!0,pagination:!0,filters:!0,locale:!0}).merge(v.z.object({type:v.z.union([v.z.literal(ul.GENERIC),v.z.literal("generic")]).optional(),authorId:v.z.union([v.z.string(),v.z.number()])}));return Nt(o.safeParse({...u,...i}))},Qy=i=>v.z.object({relation:Ff(i[Cr.ENABLED_COLLECTIONS]),commentId:Xr,content:v.z.string().min(1),reason:v.z.nativeEnum(i.reportReasons)}),Jy=(i,u)=>Nt(Qy(i).safeParse(u)),Xy=i=>v.z.object({relation:Ff(i),commentId:v.z.union([v.z.string(),v.z.number()]),authorId:v.z.union([v.z.string(),v.z.number()])}),Zy=(i,u)=>Nt(Xy(i).safeParse(u)),Ky=({strapi:i})=>({getService(u){return ft(i,u)},async findAll(u){const o=Ny(u.query);if(pe(o))return this.getService("admin").findAll(Y(o));throw ce(u,Y(o))},async findReports(u){const o=Ly(u.query);if(pe(o))return this.getService("admin").findReports(Y(o));throw ce(u,Y(o))},async findOne(u){const o=zy(u.params.id,u.query);if(pe(o))return this.getService("admin").findOneAndThread(Y(o));throw ce(u,Y(o))},async blockComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").changeBlockedComment(Y(o).id,!0);throw ce(u,Y(o))},async unblockComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").changeBlockedComment(Y(o).id,!1);throw ce(u,Y(o))},async deleteComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").deleteComment(Y(o).id);throw ce(u,Y(o))},async blockCommentThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").blockCommentThread(Y(o).id,!0);throw ce(u,Y(o))},async unblockCommentThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").blockCommentThread(Y(o).id,!1);throw ce(u,Y(o))},async resolveAbuseReport(u){const o=Py(u.params);if(pe(o))return this.getService("admin").resolveAbuseReport(Y(o));throw ce(u,Y(o))},async resolveCommentMultipleAbuseReports(u){const o=Dy({...u.request.body,id:u.params.id});if(pe(o))return this.getService("admin").resolveCommentMultipleAbuseReports(Y(o));throw ce(u,Y(o))},async resolveAllAbuseReportsForComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").resolveAllAbuseReportsForComment(Y(o).id);throw ce(u,Y(o))},async resolveAllAbuseReportsForThread(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").resolveAllAbuseReportsForThread(Y(o).id);throw ce(u,Y(o))},async resolveMultipleAbuseReports(u){const o=Fy(u.request.body);if(pe(o))return this.getService("admin").resolveMultipleAbuseReports(Y(o));throw ce(u,Y(o))},async postComment(u){const o=My({id:u.params.id,content:u.request.body.content,author:u.request.body.author});if(pe(o))return this.getService("admin").postComment(Y(o));throw ce(u,Y(o))},async updateComment(u){const o=Wy({id:u.params.id,content:u.request.body.content});if(pe(o))return this.getService("admin").updateComment(Y(o));throw ce(u,Y(o))},async approveComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").approveComment(Y(o).id);throw ce(u,Y(o))},async rejectComment(u){const o=Jr(u.params);if(pe(o))return this.getService("admin").rejectComment(Y(o).id);throw ce(u,Y(o))}}),Ir=async(i,u,o)=>Uf(i).getLocalConfig(u,o),nl=v.z.object({url:v.z.string(),name:v.z.string(),hash:v.z.string()}),e_=v.z.object({id:v.z.number(),...nl.shape,formats:v.z.object({thumbnail:nl.optional(),small:nl.optional(),medium:nl.optional(),large:nl.optional()}).optional()}).nullable().optional(),hv=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),blocked:v.z.boolean().nullable(),blockedThread:v.z.boolean().nullable(),blockReason:v.z.string().nullable(),isAdminComment:v.z.boolean().nullable(),removed:v.z.boolean().nullable(),approvalStatus:v.z.string().nullable(),related:v.z.string(),createdAt:v.z.string(),updatedAt:v.z.string().nullable(),publishedAt:v.z.string().nullable(),authorId:v.z.string().nullable(),authorName:v.z.string().nullable(),authorEmail:v.z.string().email().nullable(),authorAvatar:v.z.string().nullable(),authorUser:v.z.union([v.z.string(),v.z.object({id:v.z.number(),username:v.z.string(),email:v.z.string().email().optional().nullable(),avatar:e_})]).optional().nullable(),locale:v.z.string().nullable()}),pv=v.z.object({page:v.z.number(),pageSize:v.z.number(),pageCount:v.z.number(),total:v.z.number()}),Di=(i,u)=>o=>i?u.parseAsync(o):Promise.resolve(o),dv=(i,u)=>o=>i?u.parseAsync(o):Promise.resolve(o),t_=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable()}),$m=hv.merge(v.z.object({gotThread:v.z.boolean().nullable().optional(),threadFirstItemId:v.z.number().nullable().optional(),reports:v.z.array(t_).default([]),author:v.z.any()})),al=$m.extend({threadOf:v.z.lazy(()=>v.z.union([v.z.number(),$m])).nullable().optional()}),n_=v.z.object({id:v.z.number(),uid:v.z.string(),documentId:v.z.string(),requireCommentsApproval:v.z.boolean().nullable().optional(),locale:v.z.string().nullable().optional()});al.omit({related:!0}).extend({related:n_.nullable().optional()});const r_=v.z.array(al),i_=v.z.object({pagination:pv,results:v.z.array(al)}),ia={findMany:r_,findWithCount:i_,findOne:al,create:al},o_=v.z.object({id:v.z.number(),documentId:v.z.string(),content:v.z.string(),blocked:v.z.boolean(),blockedThread:v.z.boolean(),blockReason:v.z.string().nullable(),authorId:v.z.string(),authorName:v.z.string(),authorEmail:v.z.string(),authorAvatar:v.z.string().nullable(),isAdminComment:v.z.boolean().nullable(),removed:v.z.boolean().nullable(),approvalStatus:v.z.string().nullable(),related:v.z.string(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string(),locale:v.z.string().nullable()}),gv=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable(),related:o_.nullable().optional()}),u_=v.z.object({results:v.z.array(gv),pagination:pv}),a_=v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable()}),s_=v.z.array(v.z.object({id:v.z.number(),documentId:v.z.string().nullable(),content:v.z.string(),reason:v.z.string(),resolved:v.z.boolean(),createdAt:v.z.string(),updatedAt:v.z.string(),publishedAt:v.z.string().nullable(),locale:v.z.string().nullable(),related:hv.nullable()})),Tf={findMany:s_,findPage:u_,update:a_,create:gv},l_=i=>{const u=lr(i,"comment-report"),o=i.query(u);return{async findPage(h){const m=await Ir(i,"isValidationEnabled",!1);return o.findPage(h).then(Di(m,Tf.findPage))},async findMany(h){const m=await Ir(i,"isValidationEnabled",!1);return o.findMany(h).then(dv(m,Tf.findMany))},async update(h){const m=await Ir(i,"isValidationEnabled",!1);return o.update(h).then(Di(m,Tf.update))},async updateMany(h){return o.updateMany(h)},async create(h){const m=await Ir(i,"isValidationEnabled",!1);return o.create(h).then(Di(m,Tf.create))}}},Pi=Le.once(l_),c_=i=>{const u=lr(i,"comment");return{async findMany(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findMany(o).then(dv(h,ia.findMany))},async findWithCount(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findPage(o).then(Di(h,ia.findWithCount))},async findOne(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).findOne(o).then(m=>m?Di(h,ia.findOne)(m):null)},async update(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).update(o).then(Di(h,ia.findOne))},async delete(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).delete(o).then(m=>m?Di(h,ia.findOne)(m):null)},async deleteMany(o){return i.query(u).deleteMany(o)},updateMany(o){return i.query(u).updateMany(o)},async create(o){const h=await Ir(i,"isValidationEnabled",!1);return i.query(u).create(o).then(Di(h,ia.create))}}},it=Le.once(c_),f_=i=>({getLocalConfig(u,o){return i.config.get([Ov,u].filter(Boolean).join("."),o)},async getStore(){return await i.store({type:"plugin",name:"comments"})},async getConfig(){return await(await this.getStore()).get({key:"config"})},async get(u){const o=await this.getConfig(),h={regex:Object.keys(mm).reduce((T,F)=>({...T,[F]:mm[F].toString()}),{})},m=!!i.plugin("graphql"),A=this.getLocalConfig("reportReasons");if(o)return ol({...o,...h,reportReasons:A,isGQLPluginEnabled:u?m:void 0});const E=this.getLocalConfig("entryLabel"),C=this.getLocalConfig("approvalFlow"),x=this.getLocalConfig("blockedAuthorProps"),N={entryLabel:E,approvalFlow:C,blockedAuthorProps:x,reportReasons:A,...h};if(u){const T=this.getLocalConfig("enabledCollections"),F=this.getLocalConfig("moderatorRoles");return ol({...N,enabledCollections:T,moderatorRoles:F,isGQLPluginEnabled:m})}return ol(N)},async update(u){return await(await this.getStore()).set({key:"config",value:{...u,reportReasons:{BAD_LANGUAGE:Zt.BAD_LANGUAGE,DISCRIMINATION:Zt.DISCRIMINATION,OTHER:Zt.OTHER}}}),this.get()},async restore(){return await(await this.getStore()).delete({key:"config"}),this.get()}}),Uf=Le.once(f_),h_=({strapi:i})=>({getService(u){return ft(i,u)},getStoreRepository(){return Uf(i)},async post(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=$y(h.enabledCollections,u.params.relation,u.request.body);if(pe(m))return this.getService("client").create(m.right,u.state.user);throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllFlat(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=qy(h.enabledCollections,u.params.relation,u.query);if(pe(m))return this.getService("common").findAllFlat(ua(m.right));throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllInHierarchy(u){const o=await this.getStoreRepository().get(!0);if(pe(o)){const h=Y(o),m=Hy(h.enabledCollections,u.params.relation,u.query);if(pe(m))return this.getService("common").findAllInHierarchy(ua(m.right));throw ce(u,Y(m))}throw ce(u,Y(o))},async findAllPerAuthor(u){const o=Yy(u.params,u.query);if(pe(o))return this.getService("common").findAllPerAuthor(ua(o.right),u.params.type?![ul.GENERIC.toLowerCase(),ul.GENERIC].includes(u.params.type):!1);throw ce(u,Y(o))},async put(u){const{user:o}=u.state,h=await this.getStoreRepository().get(!0);if(pe(h)){const m=Y(h),A=jy(m.enabledCollections,{...u.params,content:u.request.body.content,author:u.request.body.author});if(pe(A))return await this.getService("client").update(A.right,o);throw ce(u,Y(A))}throw ce(u,Y(h))},async reportAbuse(u){const{state:o}=u,{user:h}=o,m=await this.getStoreRepository().get(!0);if(pe(m)){const A=Y(m),E=Jy(A,{...u.request.body,...u.params});if(pe(E))return await this.getService("client").reportAbuse(E.right,h);throw ce(u,Y(E))}throw ce(u,Y(m))},async removeComment(u){const{state:o}=u,{user:h}=o,m=await this.getStoreRepository().get(!0);if(pe(m)){const A=Y(m),E=Zy(A.enabledCollections,{...u.query,...u.params});if(pe(E))return await this.getService("client").markAsRemoved(E.right,h);throw ce(u,Y(E))}throw ce(u,Y(m))}}),p_=({strapi:i})=>{const u=ft(i,"settings");return{async get(o){try{return await u.getConfig()}catch(h){throw ce(o,h)}},async getForSettingsPage(o){try{return await u.getConfig(!0)}catch(h){throw ce(o,h)}},async update(o){const h=By(o.request.body);if(pe(h))return await u.update(Y(h));throw ce(o,Y(h))},async restore(o){try{return await u.restore()}catch(h){throw ce(o,h)}},async restart(o){try{return u.restart(),o.send({message:"Restarted",status:200})}catch(h){throw ce(o,h)}}}},d_={admin:Ky,client:h_,settings:p_},g_=[{method:"GET",path:"/moderate/all",handler:"admin.findAll",config:{policies:[]}},{method:"GET",path:"/moderate/reports",handler:"admin.findReports",config:{policies:[]}},{method:"GET",path:"/moderate/single/:id",handler:"admin.findOne",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/approve",handler:"admin.approveComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/reject",handler:"admin.rejectComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/block",handler:"admin.blockComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/unblock",handler:"admin.unblockComment",config:{policies:[]}},{method:"DELETE",path:"/moderate/single/:id/delete",handler:"admin.deleteComment",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/report/:reportId/resolve",handler:"admin.resolveAbuseReport",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/report/resolve",handler:"admin.resolveCommentMultipleAbuseReports",config:{policies:[]}},{method:"PUT",path:"/moderate/all/:id/report/resolve",handler:"admin.resolveAllAbuseReportsForComment",config:{policies:[]}},{method:"PUT",path:"/moderate/all/:id/report/resolve-thread",handler:"admin.resolveAllAbuseReportsForThread",config:{policies:[]}},{method:"PUT",path:"/moderate/multiple/report/resolve",handler:"admin.resolveMultipleAbuseReports",config:{policies:[]}},{method:"PUT",path:"/moderate/single/:id/update",handler:"admin.updateComment",config:{policies:[]}},{method:"PUT",path:"/moderate/thread/:id/block",handler:"admin.blockCommentThread",config:{policies:[]}},{method:"PUT",path:"/moderate/thread/:id/unblock",handler:"admin.unblockCommentThread",config:{policies:[]}},{method:"POST",path:"/moderate/thread/:id/postComment",handler:"admin.postComment",config:{policies:[]}}],m_=[{method:"PUT",path:"/settings/config",handler:"settings.update",config:{policies:[]}},{method:"DELETE",path:"/settings/config",handler:"settings.restore",config:{policies:[]}},{method:"POST",path:"/settings/restart",handler:"settings.restart",config:{policies:[]}},{method:"GET",path:"/settings/config",handler:"settings.getForSettingsPage",config:{policies:[]}},{method:"GET",path:"/moderate/config",handler:"settings.get",config:{policies:[]}}],v_=[...g_,...m_],y_=[{method:"GET",path:"/:relation",handler:"client.findAllInHierarchy",config:{policies:[],description:"Find all comments related to configured Collection / Single Type and return them in a nested structure",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"POST",path:"/:relation",handler:"client.post",config:{policies:[],description:"Post a comment against configured Collection / Single Type",tag:{plugin:"comments",name:"Comments",actionType:"create"}}},{method:"GET",path:"/:relation/flat",handler:"client.findAllFlat",config:{policies:[],description:"Find all comments related to configured Collection / Single Type and return them in a flat structure for further processing",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"PUT",path:"/:relation/comment/:commentId",handler:"client.put",config:{policies:[],description:"Update comment related to configured Collection / Single Type if user is the author",tag:{plugin:"comments",name:"Comments",actionType:"update"}}},{method:"POST",path:"/:relation/comment/:commentId/report-abuse",handler:"client.reportAbuse",config:{policies:[],description:"Report an abuse against comment for configured Collection / Single Type",tag:{plugin:"comments",name:"Comments",actionType:"create"}}},{method:"DELETE",path:"/:relation/comment/:commentId",handler:"client.removeComment",config:{policies:[],description:"Remove comment related to configured Collection / Single Type if user is the author",tag:{plugin:"comments",name:"Comments",actionType:"delete"}}},{method:"GET",path:"/author/:authorId",handler:"client.findAllPerAuthor",config:{policies:[],description:"Find all comments created by Strapi user",tag:{plugin:"comments",name:"Comments",actionType:"find"}}},{method:"GET",path:"/author/:authorId/:type",handler:"client.findAllPerAuthor",config:{policies:[],description:"Find all comments created by specified type of user",tag:{plugin:"comments",name:"Comments",actionType:"find"}}}],__={"content-api":{type:"content-api",routes:y_},admin:{type:"admin",routes:v_}};class fn extends Error{constructor(u,o,h=void 0){super(),this.name="Strapi:Plugin:Comments",this.status=u||500,this.message=o||"Internal error",this.payload=h,Object.setPrototypeOf(this,fn.prototype)}toString(u=this){return`${u.name} - ${u.message}`}toJSON(){return this.payload?{...this.payload,name:this.name,message:this.message}:this}}const jm=i=>i.split(kv.relatedUid).filter(u=>u&&u.length>0),mv=i=>i&&{...i,reports:(i.reports||[]).filter(u=>!u.resolved)},km=(i,u,o=[])=>{const{authorUser:h,authorId:m,authorName:A,authorEmail:E,authorAvatar:C,...x}=i;let N={};if(h&&typeof h!="string"){const T=h;N=o.reduce((F,U)=>({...F,[U]:T[U]}),{id:T.id,name:T.username,email:T.email,avatar:T.avatar?.formats?.thumbnail.url||T.avatar?.url})}else m&&(N={id:m,name:A,email:E,avatar:C});return N=Le.isEmpty(N)?N:Object.fromEntries(Object.entries(N).filter(([T])=>!u.includes(T))),{...x,author:Le.isEmpty(N)?i.author||{}:N}},Cf=i=>{throw i?new fn(401,"Not authenticated"):new fn(403,"Not authorized")},b_=i=>{const{lastname:u,username:o,firstname:h}=i;return u&&h?`${h} ${u}`:o||h||""},w_=Le.once(i=>({findAll:{createParams(u,o,h,m,A){const[E,C]=vm(u),x={orderBy:u?{[E]:C}:void 0,where:A,page:o,pageSize:h};return m&&Le.set(x,"where.content.$contains",m),x},getPopulate(){return{authorUser:il(i),threadOf:{populate:{authorUser:il(i)}},reports:{where:{resolved:!1}}}}},findReports:{getDefaultWhere(){return{resolved:{$notNull:!0}}},createParams(u,o,h,m){const[A,E]=vm(u),C={orderBy:u?{[A]:E}:void 0,where:this.getDefaultWhere(),page:o,pageSize:h};return m&&Le.set(C,"where.content.$contains",m),C}},findOneAndThread:{getDefaultWhere(u){return u?{$or:[{removed:!1},{removed:{$notNull:!1}}]}:{}},getPopulate(){const u=il(i),o={reports:{where:{resolved:!1}}},h={populate:{threadOf:{populate:{...o}},...o}};return{populate:{...h.populate,authorUser:u,threadOf:{populate:{...h.populate.threadOf.populate,authorUser:u}}}}}}})),A_=({strapi:i})=>{const u=w_(i);return{getCommonService(){return ft(i,"common")},async findAll({_q:o,orderBy:h,page:m,pageSize:A,filters:E}){const C=u.findAll.createParams(h,m,A,o,E),x=u.findAll.getPopulate(),N=it(i),{pagination:T,results:F}=await N.findWithCount({...C,count:!0,populate:x}),U=await this.getCommonService().findRelatedEntitiesFor(F);return{pagination:T,result:F.map(Q=>this.getCommonService().sanitizeCommentEntity(Q,[],[])).map(Q=>this.getCommonService().mergeRelatedEntityTo(Q,U))}},async findReports({_q:o,orderBy:h,page:m,pageSize:A}){const E=u.findReports.createParams(h,m,A,o),{pagination:C,results:x}=await Pi(i).findPage({...E,populate:["related"]}),N=x.map($=>typeof $.related=="object"?$.related.id:null).filter(Boolean),T=il(i),F=await it(i).findMany({where:{threadOf:N},populate:["threadOf"],limit:Number.MAX_SAFE_INTEGER}),U=Array.from(new Set(F.map(({threadOf:$})=>typeof $=="object"?$.id:null).filter(Boolean)));return{result:x.map($=>{const J=U.includes($.related.id),te=this.getCommonService(),X={...$,related:te.sanitizeCommentEntity({...$.related,gotThread:J},[])},me=typeof T!="boolean"?T?.populate:{};return mv(te.sanitizeCommentEntity(X,[],[],me))}),pagination:C}},async findOneAndThread({id:o,removed:h,...m}){const A=il(i),E=u.findOneAndThread.getDefaultWhere(h),C=u.findOneAndThread.getPopulate(),x=await it(i).findOne({...C,where:{id:o}});if(!x)throw new An(404,"Not found");const{relatedId:N,uid:T}=this.getCommonService().parseRelationString(x.related),F=await i.documents(T).findOne({documentId:N}).then(te=>{if(!te)throw new An(404,"Relation not found");return{...te,uid:T}}),U=x.threadOf&&typeof x.threadOf=="object"?x.threadOf.id:null,Q=await this.getCommonService().findAllInHierarchy({filters:{...E,...m,threadOf:U,related:x.related},...C,startingFromId:U,isAdmin:!0,limit:Number.MAX_SAFE_INTEGER},!1),$=typeof A!="boolean"?A?.populate:{},J=this.getCommonService().sanitizeCommentEntity({...x,threadOf:x.threadOf||null},[],[],$);return{entity:F,selected:J,level:Q}},async changeBlockedComment(o,h){const m=await this.getCommonService().findOne({id:o});return this.getCommonService().updateComment({id:o},{blocked:Le.isNil(h)?!m.blocked:h})},async deleteComment(o){return it(i).update({where:{id:o},data:{removed:!0}})},async blockCommentThread(o,h){const m=await this.getCommonService().findOne({id:o}),A=h||!m.blocked,E=await this.getCommonService().updateComment({id:o},{blocked:A,blockedThread:A});return await this.blockNestedThreads(o,A),this.getCommonService().sanitizeCommentEntity(E,[])},async approveComment(o){const h=await it(i).update({where:{id:o},data:{approvalStatus:Fi.APPROVED}});if(!h)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(h,[])},async rejectComment(o){const h=await it(i).update({where:{id:o},data:{approvalStatus:Fi.REJECTED}});if(!h)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(h,[])},async blockNestedThreads(o,h){return this.getCommonService().modifiedNestedNestedComments(o,"blockedThread",h)},async resolveAbuseReport({id:o,reportId:h}){return Pi(i).update({where:{id:h,related:o},data:{resolved:!0}})},async resolveCommentMultipleAbuseReports({id:o,reportIds:h}){if((await Pi(i).findMany({where:{id:h,related:o},populate:["related"]})).length===h.length)return Pi(i).updateMany({where:{id:h},data:{resolved:!0}});throw new An(400,"At least one of selected reports got invalid comment entity relation. Try again.")},async resolveAllAbuseReportsForComment(o){if(!o)throw new An(400,"There is something wrong with comment Id. Try again.");return Pi(i).updateMany({where:{related:o,resolved:!1},data:{resolved:!0}})},async resolveAllAbuseReportsForThread(o){if(!o)throw new An(400,"There is something wrong with comment Id. Try again.");const h=await it(i).findMany({where:{threadOf:o},select:["id"]});return Pi(i).updateMany({where:{related:h.map(({id:m})=>m).concat([o]),resolved:!1},data:{resolved:!0}})},async resolveMultipleAbuseReports({reportIds:o}){return Pi(i).updateMany({where:{id:{$in:o}},data:{resolved:!0}})},async postComment({id:o,author:h,content:m}){const A=await it(i).findOne({where:{id:o}});if(!A)throw new An(404,"Not found");return it(i).create({data:{content:m,threadOf:o,authorId:h.id,authorName:b_(h),authorEmail:h.email,related:A.related,isAdminComment:!0}})},async updateComment({id:o,content:h}){const m=await it(i).update({where:{id:o},data:{content:h}});if(!m)throw new An(404,"Not found");return this.getCommonService().sanitizeCommentEntity(m,[])}}},S_=async(i,u)=>{try{return ol(await i())}catch{return uv(u)}},E_=({strapi:i})=>{const u=async(o,h)=>{if(h)return{authorUser:h.id};if(o)return{authorId:o.id,authorName:o.name,authorEmail:o.email,authorAvatar:o.avatar}};return{getCommonService(){return ft(i,"common")},async create({relation:o,content:h,threadOf:m,author:A,approvalStatus:E,locale:C},x){const{uid:N,relatedId:T}=this.getCommonService().parseRelationString(o),F=await i.documents(N).findOne({documentId:T,locale:C});if(!F)throw new fn(400,'Relation for field "related" does not exist. Check your payload please.');const Q=(await this.getCommonService().getConfig(oa.APPROVAL_FLOW,[])).includes(N)||F.requireCommentsApproval,$=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]),J=await S_(async()=>m?await this.getCommonService().findOne({id:m,related:o,locale:C||null}):null,new fn(400,"Thread does not exist"));if(vy(J))throw Y(J);const te=Y(J);if(!A&&!this.getCommonService().isValidUserContext(x))throw Cf(x);const[X,me]=await Promise.all([this.getCommonService().checkBadWords(h),u(A,x)]),ve=!Le.isEmpty(me)&&!(me.authorId||me.authorUser);if(Le.isEmpty(me)||ve)throw new fn(400,`Not able to recognise author of a comment. Make sure you've provided "author" property in a payload or authenticated your request properly.`);if(Q&&E&&E!==Fi.PENDING)throw new fn(400,"Invalid approval status");const Ve={...await it(i).create({data:{...me,threadOf:m,locale:C,content:X,related:o,approvalStatus:Q?Fi.PENDING:Fi.APPROVED},populate:{authorUser:{populate:["avatar"]}}}),threadOf:te},Ye=this.getCommonService().sanitizeCommentEntity(Ve,$);try{await this.sendResponseNotification(Ye)}catch(Me){console.error(Me)}return Ye},async update({commentId:o,content:h,author:m,relation:A},E){if(!m&&!this.getCommonService().isValidUserContext(E))throw Cf(E);const C=E?.id||m?.id;if(await this.getCommonService().checkBadWords(h)){const x=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]),N=await this.getCommonService().findOne({id:o,related:A});if(N&&N.author?.id?.toString()===C?.toString()){const T=await it(i).update({where:{id:o},data:{content:h},populate:{threadOf:!0,authorUser:{populate:["avatar"]}}});return this.getCommonService().sanitizeCommentEntity(T,x)}}},async reportAbuse({commentId:o,relation:h,...m},A){if(!this.getCommonService().isValidUserContext(A))throw Cf(A);try{const E=await this.getCommonService().findOne({id:o,related:h});if(E.isAdminComment)throw new fn(403,"You're not allowed to take an action on that entity. This in a admin comment.");if(E){const C=await Pi(i).create({data:{...m,resolved:!1,related:o}});if(C){const x={...C,related:E};try{return await this.sendAbuseReportEmail(C.reason,C.content),x}catch{return x}}else throw new fn(500,"Report cannot be created")}throw new fn(403,"You're not allowed to take an action on that entity. Make sure that comment exist or you've authenticated your request properly.")}catch(E){throw E}},async markAsRemoved({commentId:o,relation:h,authorId:m},A){if(!m&&!this.getCommonService().isValidUserContext(A))throw Cf(A);const E=A?.id||m;if(!E)throw new fn(403,`You're not allowed to take an action on that entity. Make sure that you've provided proper "authorId" or authenticated your request properly.`);try{const C=A?.id?{authorUser:E}:{authorId:E};if(await this.getCommonService().findOne({id:o,related:h,...C})){const N=await it(i).update({where:{id:o,related:h},data:{removed:!0},populate:{threadOf:!0,authorUser:{populate:["avatar"]}}});await this.markAsRemovedNested(o,!0);const T=await this.getCommonService().getConfig(oa.AUTHOR_BLOCKED_PROPS,[]);return this.getCommonService().sanitizeCommentEntity(N,T)}else throw new fn(404,"Entity does not exist or you're not allowed to take an action on it")}catch{throw new fn(404,"Entity does not exist or you're not allowed to take an action on it")}},async sendAbuseReportEmail(o,h){const m="strapi-super-admin",A=await this.getCommonService().getConfig(oa.MODERATOR_ROLES,[m]);if(A.length>0){const E=await i.query("admin::user").findMany({where:{roles:{code:A}}}).then(C=>C.map(x=>x.email));if(E.length>0){const C=await i.query("admin::user").findOne({where:{roles:{code:m}}});i.plugin("email")&&await i.plugin("email").service("email").send({to:E,from:C.email,subject:"New abuse report on comment",text:`
                         There was a new abuse report on your app. 
                         Reason: ${o}
                         Message: ${h}
