---
import type { Media } from '@lib/strapi';
const { image, alt, caption, credit, displayMode } = Astro.props as {
  image: Media;
  alt?: string;
  caption?: string;
  credit?: string;
  displayMode?: 'auto' | 'image' | 'gif';
};
const computedAlt = alt ?? image.alternativeText ?? '';
const desiredMode = displayMode ?? 'auto';
const mime = image?.mime?.toLowerCase() ?? '';
const isGif =
  desiredMode === 'gif' ||
  (desiredMode === 'auto' && (mime === 'image/gif' || image.url?.toLowerCase().endsWith('.gif')));
const src = image?.formats?.large?.url ?? image?.formats?.medium?.url ?? image.url;
const srcset = isGif
  ? undefined
  : [
      image.formats?.thumbnail?.url ? `${image.formats.thumbnail.url} 150w` : null,
      image.formats?.small?.url ? `${image.formats.small.url} 320w` : null,
      image.formats?.medium?.url ? `${image.formats.medium.url} 640w` : null,
      image.formats?.large?.url ? `${image.formats.large.url} 960w` : null,
      image.url ? `${image.url} ${image.width ?? 1200}w` : null,
    ]
        .filter(Boolean)
        .join(', ');
---
<figure class="content-figure">
  <img
    src={src}
    srcset={srcset}
    sizes="(max-width: 768px) 90vw, 720px"
    alt={computedAlt}
    loading="lazy"
    decoding="async"
    data-animated={isGif ? 'true' : 'false'}
    class="content-figure__image"
  />
  {(caption || credit) && (
    <figcaption class="content-figure__caption muted">
      {caption}
      {credit && <span>（{credit}）</span>}
    </figcaption>
  )}
</figure>

<style>
  :global(.content-figure) {
    margin: 1.5rem auto;
    text-align: center;
    max-width: min(680px, 100%);
    padding: 0 1rem;
  }

  :global(.content-figure__image) {
    width: 100%;
    height: auto;
    border-radius: 0.75rem;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.08);
  }

  :global(.content-figure__caption) {
    font-size: 0.85rem;
    margin-top: 0.5rem;
    line-height: 1.4;
  }
</style>
