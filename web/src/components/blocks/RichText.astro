const MIN_SCALE = 0.7;
const MAX_SCALE = 1.8;

const { body, fontScale } = Astro.props as { body: string; fontScale?: number };

const clampScale = (value: number) => Math.round(Math.min(MAX_SCALE, Math.max(MIN_SCALE, value)) * 100) / 100;
const normalizedScale =
  typeof fontScale === 'number' && Number.isFinite(fontScale) ? clampScale(fontScale) : null;
---
<div
  class="richtext"
  style={normalizedScale !== null ? { '--richtext-scale': normalizedScale } : undefined}
  set:html={body}
></div>
<style>
.richtext {
  --richtext-scale: 1;
  font-size: calc(var(--article-font-size) * var(--richtext-scale));
  line-height: calc(var(--article-line-height) * clamp(0.9, var(--richtext-scale), 1.35));
}
.richtext :global(p) {
  margin: 0 0 1rem;
}
.richtext :global(figure.richtext-figure) {
  margin: 0 0 1.5rem;
  display: grid;
  gap: 0.5rem;
}
.richtext :global(figure.richtext-figure img) {
  width: 100%;
  height: auto;
  border-radius: 0.75rem;
  display: block;
}
.richtext :global(img) {
  max-width: 100%;
  height: auto;
}
.richtext :global(figure.richtext-figure figcaption) {
  font-size: 0.85rem;
  color: var(--color-text-muted);
}
.richtext :global(h2) {
  font-size: 1.75rem;
  margin: 2rem 0 1rem;
}
.richtext :global(h3) {
  font-size: 1.4rem;
  margin: 1.5rem 0 0.75rem;
}
.richtext :global(ul) {
  padding-left: 1.5rem;
}
.richtext :global(a) {
  color: var(--color-accent);
  text-decoration: underline;
}
</style>
