---
import { REMARK42 } from '@config/site';

interface Props {
  slug: string;
  title: string;
  url: string;
}

const { slug, title, url } = Astro.props as Props;

const normaliseHost = (value: string | undefined | null) => {
  if (!value) return null;
  const trimmed = value.trim();
  if (!trimmed) return null;

  const hasProtocol = /^https?:\/\//i.test(trimmed);
  try {
    const origin = new URL(hasProtocol ? trimmed : `https://${trimmed}`).origin;
    return origin.replace(/\/$/, '');
  } catch (error) {
    console.warn('[remark42] invalid host', error);
    return null;
  }
};

const host = normaliseHost(REMARK42.host);
const siteId = REMARK42.siteId?.trim() || '';
const locale = REMARK42.locale ?? 'ja';
const containerId = `remark42-${slug.replace(/[^a-zA-Z0-9-_]/g, '-') || 'thread'}`;
const fallbackId = `${containerId}-fallback`;
const scriptId = 'remark42-embed-script';

const fallbackReason = (() => {
  if (!host || !siteId) return 'missing-config';
  try {
    const pageUrl = new URL(url);
    if (pageUrl.protocol === 'https:' && host.startsWith('http:')) {
      return 'mixed-content';
    }
  } catch (error) {
    // ignore – fallback to default behaviour
  }
  return null;
})();

const fallbackMessages: Record<string, string> = {
  'missing-config': 'コメントサービスが未設定です。環境変数 PUBLIC_REMARK42_HOST / PUBLIC_REMARK42_SITE_ID を確認してください。',
  'mixed-content': 'HTTPS ページでは HTTPS のコメントホストを指定してください。',
  'load-failed': 'コメントウィジェットの読み込みに失敗しました。ネットワークまたはCSPを確認してください。',
  'render-timeout': 'コメントの初期化に時間がかかっています。ページを再読み込みしてください。',
  'init-error': 'コメント欄の初期化でエラーが発生しました。',
};

const serializedFallback = JSON.stringify(fallbackMessages);
const serializedConfig = JSON.stringify({
  host,
  site_id: siteId,
  components: ['embed'],
  locale,
  url,
  title,
  page_title: title,
});
---
<section class="remark42-section" aria-labelledby={`${containerId}-title`}>
  <h2 id={`${containerId}-title`}>コメント</h2>
  <div class="remark42-wrapper">
    {fallbackReason ? (
      <p class="remark42-fallback" data-reason={fallbackReason} role="status">
        {fallbackMessages[fallbackReason] ?? fallbackMessages['init-error']}
      </p>
    ) : (
      <>
        <div
          id={containerId}
          class="remark42"
          data-url={url}
          data-title={title}
          data-page-title={title}
          data-components="embed"
          data-config={serializedConfig}
        ></div>
        <p id={fallbackId} class="remark42-fallback" role="status" hidden></p>
        <script
          is:inline
          data-container-id={containerId}
          data-fallback-id={fallbackId}
          data-script-id={scriptId}
          data-config={serializedConfig}
          data-fallbacks={serializedFallback}
        >
          (function () {
            const scriptEl = document.currentScript;
            if (!scriptEl) return;

            const containerId = scriptEl.dataset.containerId || '';
            const fallbackId = scriptEl.dataset.fallbackId || '';
            const scriptId = scriptEl.dataset.scriptId || 'remark42-embed-script';

            const container = document.getElementById(containerId);
            const fallback = document.getElementById(fallbackId);

            const parseJson = (value) => {
              if (!value) return {};
              try {
                return JSON.parse(value);
              } catch (error) {
                console.warn('[remark42] failed to parse JSON', error);
                return {};
              }
            };

            const messages = parseJson(scriptEl.dataset.fallbacks);
            const baseConfig = parseJson(scriptEl.dataset.config);

            const showFallback = (reason) => {
              if (!fallback) return;
              fallback.hidden = false;
              fallback.dataset.reason = reason;
              fallback.textContent = messages[reason] || messages['init-error'] || '';
            };

            const hideFallback = () => {
              if (!fallback) return;
              fallback.hidden = true;
              fallback.dataset.reason = '';
              fallback.textContent = '';
            };

            if (!container || !baseConfig.host || !baseConfig.site_id) {
              showFallback('missing-config');
              return;
            }

            const resolveTheme = () =>
              document.documentElement.dataset.theme === 'dark' ? 'dark' : 'light';

            const applyConfig = () => {
              window.remark_config = {
                ...baseConfig,
                theme: resolveTheme(),
              };
            };

            const mountInstance = () => {
              if (!container) return;
              if (!window.REMARK42 || typeof window.REMARK42.createInstance !== 'function') {
                return;
              }

              try {
                container.innerHTML = '';
                window.REMARK42.createInstance({
                  node: container,
                  locale: baseConfig.locale,
                  site_id: baseConfig.site_id,
                  host: baseConfig.host,
                  components: baseConfig.components,
                  url: baseConfig.url,
                });
                hideFallback();
              } catch (error) {
                console.error('[remark42] failed to mount instance', error);
                showFallback('init-error');
              }
            };

            const ensureScript = () => {
              const existing = document.getElementById(scriptId);
              if (existing) {
                if (existing.dataset.loaded === 'true') {
                  mountInstance();
                } else {
                  existing.addEventListener(
                    'load',
                    () => {
                      existing.dataset.loaded = 'true';
                      mountInstance();
                    },
                    { once: true }
                  );
                  existing.addEventListener(
                    'error',
                    () => showFallback('load-failed'),
                    { once: true }
                  );
                }
                return;
              }

              const script = document.createElement('script');
              script.id = scriptId;
              script.async = true;
              script.defer = true;
              script.src = baseConfig.host.replace(/\/$/, '') + '/web/embed.js';
              script.addEventListener('load', () => {
                script.dataset.loaded = 'true';
                mountInstance();
              });
              script.addEventListener('error', () => showFallback('load-failed'));
              (document.head || document.body || document.documentElement).appendChild(script);
            };

            applyConfig();
            ensureScript();

            const timeout = window.setTimeout(() => {
              if (!container.querySelector('iframe')) {
                showFallback('render-timeout');
              }
            }, 5000);

            const handleThemeChange = (event) => {
              const nextTheme = (event?.detail?.theme ?? resolveTheme()) === 'dark' ? 'dark' : 'light';
              window.remark_config = {
                ...window.remark_config,
                theme: nextTheme,
              };
              if (window.REMARK42?.changeTheme) {
                window.REMARK42.changeTheme(nextTheme);
              }
            };

            document.addEventListener('themechange', handleThemeChange);

            window.addEventListener('load', () => {
              window.clearTimeout(timeout);
              if (container.querySelector('iframe')) {
                hideFallback();
              }
            });
          })();
        </script>
      </>
    )}
  </div>
</section>
---
<style>
  .remark42-section {
    display: grid;
    gap: 1.5rem;
    margin-top: 3rem;
  }

  .remark42-wrapper {
    display: grid;
    gap: 0.75rem;
  }

  .remark42 {
    min-height: 260px;
  }

  .remark42-fallback {
    font-size: 0.95rem;
  }
</style>
